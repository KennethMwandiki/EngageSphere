[
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\external-multiplatform-stream.js",
    "line": 29,
    "match": "TOKEN",
    "excerpt": "* @param {string} token - The stream or auth token."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\external-multiplatform-stream.js",
    "line": 30,
    "match": "TOKEN",
    "excerpt": "* @param {string} [authToken] - Optional Bearer token for backend authentication."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\external-multiplatform-stream.js",
    "line": 32,
    "match": "TOKEN",
    "excerpt": "async function startStreamOnAllPlatforms(channel, token, authToken) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\external-multiplatform-stream.js",
    "line": 38,
    "match": "TOKEN",
    "excerpt": "token"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\external-multiplatform-stream.js",
    "line": 41,
    "match": "TOKEN",
    "excerpt": "...(authToken ? { 'Authorization': `Bearer ${authToken}` } : {})"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\external-multiplatform-stream.js",
    "line": 52,
    "match": "TOKEN",
    "excerpt": "// startStreamOnAllPlatforms('GlobalEventChannel', 'STREAM_TOKEN', 'YOUR_AUTH_TOKEN');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend script.js",
    "line": 21,
    "match": "PASSWORD",
    "excerpt": "const password = document.getElementById('loginPassword').value;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 93,
    "match": "TOKEN",
    "excerpt": "<label for=\"streamToken\">Stream/Auth Token:</label>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 94,
    "match": "TOKEN",
    "excerpt": "<input type=\"text\" id=\"streamToken\" name=\"streamToken\" required placeholder=\"Enter stream or auth token\" />"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 190,
    "match": "PASSWORD",
    "excerpt": "<label for=\"loginPassword\">Password:</label>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 191,
    "match": "PASSWORD",
    "excerpt": "<input type=\"password\" id=\"loginPassword\" name=\"loginPassword\" required placeholder=\"Enter your password\" /><br/>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 205,
    "match": "PASSWORD",
    "excerpt": "<label for=\"signupPassword\">Password:</label>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 206,
    "match": "PASSWORD",
    "excerpt": "<input type=\"password\" id=\"signupPassword\" name=\"signupPassword\" required placeholder=\"Create a password\" /><br />"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 278,
    "match": "TOKEN",
    "excerpt": "const token = localStorage.getItem('authToken');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 279,
    "match": "TOKEN",
    "excerpt": "if (!token) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 280,
    "match": "TOKEN",
    "excerpt": "healthResult.innerHTML = '<div class=\"muted\">Not authenticated. Set an admin JWT in localStorage under <code>authToken</code>.</div>';"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 287,
    "match": "TOKEN",
    "excerpt": "headers: { 'Authorization': `Bearer ${token}` }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 311,
    "match": "TOKEN",
    "excerpt": "return !!localStorage.getItem('authToken');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 344,
    "match": "TOKEN",
    "excerpt": "const token = localStorage.getItem('authToken');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 349,
    "match": "TOKEN",
    "excerpt": "...(token ? { 'Authorization': `Bearer ${token}` } : {})"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 365,
    "match": "TOKEN",
    "excerpt": "const token = document.getElementById('streamToken').value;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 377,
    "match": "TOKEN",
    "excerpt": "body: JSON.stringify({ platform, channel, token })"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 417,
    "match": "TOKEN",
    "excerpt": "if (localStorage.getItem('authToken')) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 431,
    "match": "PASSWORD",
    "excerpt": "const password = document.getElementById('loginPassword').value;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 437,
    "match": "PASSWORD",
    "excerpt": "body: JSON.stringify({ username, password })"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 441,
    "match": "TOKEN",
    "excerpt": "localStorage.setItem('authToken', data.token);"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 450,
    "match": "TOKEN",
    "excerpt": "localStorage.removeItem('authToken');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 488,
    "match": "TOKEN",
    "excerpt": "const token = localStorage.getItem('authToken');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\frontend-prototype.html",
    "line": 493,
    "match": "TOKEN",
    "excerpt": "...(token ? { 'Authorization': `Bearer ${token}` } : {})"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\index.html",
    "line": 40,
    "match": "PASSWORD",
    "excerpt": "<label for=\"loginPassword\">Password:</label>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\index.html",
    "line": 41,
    "match": "PASSWORD",
    "excerpt": "<input type=\"password\" id=\"loginPassword\" name=\"loginPassword\" required placeholder=\"Enter your password\" /><br/>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\index.html",
    "line": 54,
    "match": "PASSWORD",
    "excerpt": "<label for=\"signupPassword\">Password:</label>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\index.html",
    "line": 55,
    "match": "PASSWORD",
    "excerpt": "<input type=\"password\" id=\"signupPassword\" name=\"signupPassword\" required placeholder=\"Create a password\" /><br/>"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\OpenAPI (Swagger).yml",
    "line": 12,
    "match": "APIKEY",
    "excerpt": "type: apiKey"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\OpenAPI (Swagger).yml",
    "line": 15,
    "match": "APIKEY",
    "excerpt": "apiKeyAuth:"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\OpenAPI (Swagger).yml",
    "line": 16,
    "match": "APIKEY",
    "excerpt": "type: apiKey"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\OpenAPI (Swagger).yml",
    "line": 298,
    "match": "TOKEN",
    "excerpt": "- token"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\OpenAPI (Swagger).yml",
    "line": 320,
    "match": "TOKEN",
    "excerpt": "token:"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\OpenAPI (Swagger).yml",
    "line": 322,
    "match": "TOKEN",
    "excerpt": "description: Stream or authentication token"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 1,
    "match": "SECRET",
    "excerpt": "Verifying the GitHub repository and setting CI secrets"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 9,
    "match": "SECRET",
    "excerpt": "2) Set required GitHub Actions secrets"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 11,
    "match": "SECRET",
    "excerpt": "- Recommended secrets (used by workflows in this repo):"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 12,
    "match": "TOKEN",
    "excerpt": "- VERCEL_TOKEN, VERCEL_ORG_ID, VERCEL_PROJECT_ID"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 13,
    "match": "GOOGLE_PLAY",
    "excerpt": "- GOOGLE_PLAY_SERVICE_ACCOUNT"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 14,
    "match": "PASSWORD",
    "excerpt": "- ANDROID_PACKAGE_NAME, ANDROID_KEYSTORE_BASE64, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_ALIAS, ANDROID_KEY_PASSWORD"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 15,
    "match": "API_KEY",
    "excerpt": "- APPLE_API_KEY, APPLE_API_ISSUER_ID"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 16,
    "match": "SLACK_WEBHOOK",
    "excerpt": "- SLACK_WEBHOOK (optional)"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 18,
    "match": "SECRET",
    "excerpt": "Option A â€” set secrets from environment (PowerShell):"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 22,
    "match": "TOKEN",
    "excerpt": "$env:VERCEL_TOKEN = 'your-vercel-token'"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 24,
    "match": "SECRET",
    "excerpt": ".\\scripts\\gh-set-secrets.ps1 -RepoOwner 'KennethMwandiki' -RepoName 'EngageSphere'"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 27,
    "match": "SECRET",
    "excerpt": "Option B â€” use a JSON file `scripts\\secrets.json` with name/value pairs and call the script."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\PUBLISH.md",
    "line": 31,
    "match": "SECRET",
    "excerpt": "Go to the repo Settings â†’ Secrets and variables â†’ Actions to confirm secrets are present."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\README.md",
    "line": 30,
    "match": "SECRET",
    "excerpt": "Repository secrets"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\README.md",
    "line": 33,
    "match": "SECRET",
    "excerpt": "Add the required repository secrets in Settings â†’ Secrets â†’ Actions as"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\README.md",
    "line": 34,
    "match": "SECRET",
    "excerpt": "documented in the workflow files. Typical secrets include Vercel, Google Play,"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\script.js",
    "line": 23,
    "match": "PASSWORD",
    "excerpt": "const password = document.getElementById('loginPassword').value;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\SECURITY_AND_COMPLIANCE.md",
    "line": 6,
    "match": "SECRET",
    "excerpt": "- End-to-end encryption (E2EE) for user-sensitive messages and business secrets where feasible."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\SECURITY_AND_COMPLIANCE.md",
    "line": 68,
    "match": "SECRET",
    "excerpt": "- Access control: use least-privilege IAM roles for services that call KMS. Use service identities (Managed Identities / Workload Identity Federation) instead of long-lived secrets."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\SECURITY_AND_COMPLIANCE.md",
    "line": 78,
    "match": "SECRET",
    "excerpt": "- At-rest: all DB fields that contain PII, secrets, or AI prompts/results should be encrypted via envelope encryption or database-level TDE in addition to app-layer encryption."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\SECURITY_AND_COMPLIANCE.md",
    "line": 120,
    "match": "SECRET",
    "excerpt": "- SAST (GitHub Code Scanning, ESLint, semgrep), dependency scanning (Dependabot/Snyk), secret scanning."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\server.js",
    "line": 60,
    "match": "SECRET",
    "excerpt": "console.warn('\\nAdd them to your local .env (copy .env.example) or set them in your deployment/CI secrets.');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 15,
    "match": "SECRET",
    "excerpt": "JWT_SECRET=your_local_jwt_secret"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 41,
    "match": "PASSWORD",
    "excerpt": "# This will POST { username: 'admin', password: 'adminpass' }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 42,
    "match": "TOKEN",
    "excerpt": "# and print the JSON response containing the token."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 44,
    "match": "PASSWORD",
    "excerpt": "-Body (@{ username = 'admin'; password = 'adminpass' } | ConvertTo-Json) \\"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 48,
    "match": "TOKEN",
    "excerpt": "Look for the `token` value in the response."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 50,
    "match": "TOKEN",
    "excerpt": "Option B â€” Create a signed token locally with Node (useful if you don't want to hit the login route):"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 53,
    "match": "SECRET",
    "excerpt": "# Replace the secret if you used a custom JWT_SECRET in .env"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 54,
    "match": "SECRET",
    "excerpt": "$env:JWT_SECRET='your_local_jwt_secret'"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 55,
    "match": "TOKEN",
    "excerpt": "node -e \"console.log(require('jsonwebtoken').sign({ username: 'admin', role: 'admin' }, process.env.JWT_SECRET || 'your_local_jwt_secret', { expiresIn: '1h' }))\""
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 58,
    "match": "TOKEN",
    "excerpt": "Copy the token string from the output."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 66,
    "match": "TOKEN",
    "excerpt": "localStorage.setItem('authToken', '<PASTE_ADMIN_JWT_HERE>');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 82,
    "match": "TOKEN",
    "excerpt": "$token = '<PASTE_ADMIN_JWT_HERE>'"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 83,
    "match": "TOKEN",
    "excerpt": "Invoke-RestMethod -Uri http://localhost:3000/api/admin/health -Method Get -Headers @{ Authorization = \"Bearer $token\" }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 86,
    "match": "TOKEN",
    "excerpt": "curl -H \"Authorization: Bearer <token>\" http://localhost:3000/api/admin/health"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 98,
    "match": "SECRET",
    "excerpt": "\"JWT_SECRET\": true,"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 107,
    "match": "TOKEN",
    "excerpt": "- 401 No token provided: Make sure the Authorization header is present or use localStorage.authToken for the UI."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 108,
    "match": "TOKEN",
    "excerpt": "- 403 Invalid token or Admin access required: Ensure token payload includes `role: 'admin'` and the token is signed with the same `JWT_SECRET` the server uses."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 109,
    "match": "TOKEN",
    "excerpt": "- Token expired: create a fresh token or adjust expiresIn during dev."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 112,
    "match": "TOKEN",
    "excerpt": "- You can add a small development-only helper to mint tokens on the server to simplify testing; do NOT include such a helper in production."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\TESTING.md",
    "line": 115,
    "match": "TOKEN",
    "excerpt": "If you'd like, I can add a tiny `scripts/generate-admin-token.js` helper and a short `TESTING` npm script â€” tell me and I'll add it."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\admin.js",
    "line": 19,
    "match": "SECRET",
    "excerpt": "JWT_SECRET: !!process.env.JWT_SECRET,"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\agora.js",
    "line": 12,
    "match": "APIKEY",
    "excerpt": "const agoraRestApiKey = \"a41.chat.agora.io\";"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\agora.js",
    "line": 25,
    "match": "APIKEY",
    "excerpt": "const apiUrl = `https://${agoraRestApiKey}/dev/v1/${chatConfig.OrgName}/${chatConfig.AppName}/users`;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 3,
    "match": "TOKEN",
    "excerpt": "const jwt = require('jsonwebtoken');"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 6,
    "match": "SECRET",
    "excerpt": "const JWT_SECRET = process.env.JWT_SECRET || 'supersecretkey';"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 8,
    "match": "PASSWORD",
    "excerpt": "{ username: 'admin', password: 'adminpass', role: 'admin' },"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 9,
    "match": "PASSWORD",
    "excerpt": "{ username: 'user', password: 'userpass', role: 'user' }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 14,
    "match": "PASSWORD",
    "excerpt": "const { username, password } = req.body;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 15,
    "match": "PASSWORD",
    "excerpt": "const user = USERS.find(u => u.username === username && u.password === password);"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 17,
    "match": "TOKEN",
    "excerpt": "const token = jwt.sign({ username: user.username, role: user.role }, JWT_SECRET, { expiresIn: '2h' });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 18,
    "match": "TOKEN",
    "excerpt": "res.json({ token, role: user.role });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 24,
    "match": "TOKEN",
    "excerpt": "if (!authHeader) return res.status(401).json({ error: 'No token provided' });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 25,
    "match": "TOKEN",
    "excerpt": "const token = authHeader.split(' ')[1];"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 26,
    "match": "TOKEN",
    "excerpt": "jwt.verify(token, JWT_SECRET, (err, user) => {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\auth.js",
    "line": 27,
    "match": "TOKEN",
    "excerpt": "if (err) return res.status(403).json({ error: 'Invalid token' });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 12,
    "match": "SECRET",
    "excerpt": "const GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 17,
    "match": "TOKEN",
    "excerpt": "let googleAccessToken = null;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 18,
    "match": "TOKEN",
    "excerpt": "let googleRefreshToken = null;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 44,
    "match": "TOKEN",
    "excerpt": "// Step 2: OAuth callback to exchange code for access token"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 49,
    "match": "TOKEN",
    "excerpt": "const tokenRes = await axios.post('https://oauth2.googleapis.com/token',"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 53,
    "match": "SECRET",
    "excerpt": "client_secret: GOOGLE_CLIENT_SECRET,"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 61,
    "match": "TOKEN",
    "excerpt": "googleAccessToken = tokenRes.data.access_token;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 62,
    "match": "TOKEN",
    "excerpt": "googleRefreshToken = tokenRes.data.refresh_token;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 71,
    "match": "TOKEN",
    "excerpt": "if (!googleAccessToken) return res.status(401).json({ error: 'Google not authorized. Please <a href=\"/api/live/google/auth?scope=drive\">authorize Google Drive</a>.' });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 78,
    "match": "TOKEN",
    "excerpt": "Authorization: `Bearer ${googleAccessToken}`,"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 91,
    "match": "TOKEN",
    "excerpt": "if (!googleAccessToken) return res.status(401).json({ error: 'Google not authorized. Please <a href=\"/api/live/google/auth?scope=contacts\">authorize Google Contacts</a>.' });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 94,
    "match": "TOKEN",
    "excerpt": "headers: { Authorization: `Bearer ${googleAccessToken}` },"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 105,
    "match": "TOKEN",
    "excerpt": "if (!googleAccessToken) return res.status(401).json({ error: 'Google not authorized. Please <a href=\"/api/live/google/auth?scope=gmail\">authorize Gmail</a>.' });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 118,
    "match": "TOKEN",
    "excerpt": "headers: { Authorization: `Bearer ${googleAccessToken}` }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 128,
    "match": "SECRET",
    "excerpt": "const ZOOM_CLIENT_SECRET = process.env.ZOOM_CLIENT_SECRET;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 130,
    "match": "TOKEN",
    "excerpt": "let zoomAccessToken = null; // In production, use a persistent store"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 141,
    "match": "TOKEN",
    "excerpt": "// Step 2: OAuth callback to exchange code for access token"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 146,
    "match": "TOKEN",
    "excerpt": "const tokenRes = await axios.post('https://zoom.us/oauth/token',"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 154,
    "match": "SECRET",
    "excerpt": "'Authorization': 'Basic ' + Buffer.from(`${ZOOM_CLIENT_ID}:${ZOOM_CLIENT_SECRET}`).toString('base64'),"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 159,
    "match": "TOKEN",
    "excerpt": "zoomAccessToken = tokenRes.data.access_token;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 160,
    "match": "TOKEN",
    "excerpt": "// In production, store refresh_token and handle expiry"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 175,
    "match": "TOKEN",
    "excerpt": "if (!zoomAccessToken) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 184,
    "match": "TOKEN",
    "excerpt": "headers: { Authorization: `Bearer ${zoomAccessToken}` }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 191,
    "match": "TOKEN",
    "excerpt": "headers: { Authorization: `Bearer ${zoomAccessToken}` }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 201,
    "match": "TOKEN",
    "excerpt": "if (!googleAccessToken) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\live.js",
    "line": 217,
    "match": "TOKEN",
    "excerpt": "headers: { Authorization: `Bearer ${googleAccessToken}` }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\stream.js",
    "line": 24,
    "match": "TOKEN",
    "excerpt": "const { platform, channel, token } = req.body;"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\stream.js",
    "line": 25,
    "match": "TOKEN",
    "excerpt": "if (!platform || !channel || !token) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\api\\stream.js",
    "line": 26,
    "match": "TOKEN",
    "excerpt": "return res.status(400).json({ error: 'platform, channel, and token are required.' });"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 2,
    "match": "SECRET",
    "excerpt": "Sets a set of recommended GitHub Actions secrets for the repository using `gh`."
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 5,
    "match": "SECRET",
    "excerpt": ".\\gh-set-secrets.ps1 -RepoOwner \"KennethMwandiki\" -RepoName \"EngageSphere\" -SecretsFile \".\\\\scripts\\\\secrets.json\""
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 13,
    "match": "SECRET",
    "excerpt": "[Parameter(Mandatory=$false)] [string] $SecretsFile = \".\\secrets.json\""
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 16,
    "match": "SECRET",
    "excerpt": "function Set-Secret($name, $value) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 21,
    "match": "SECRET",
    "excerpt": "gh secret set $name --repo \"$RepoOwner/$RepoName\" --body \"$value\" | Out-Null"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 22,
    "match": "SECRET",
    "excerpt": "if ($?) { Write-Host \"Set secret: $name\" } else { Write-Host \"Failed to set: $name\" }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 30,
    "match": "SECRET",
    "excerpt": "$secrets = @{"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 31,
    "match": "TOKEN",
    "excerpt": "VERCEL_TOKEN = $env:VERCEL_TOKEN"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 32,
    "match": "VERCEL",
    "excerpt": "VERCEL_ORG_ID = $env:VERCEL_ORG_ID"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 33,
    "match": "VERCEL",
    "excerpt": "VERCEL_PROJECT_ID = $env:VERCEL_PROJECT_ID"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 34,
    "match": "GOOGLE_PLAY",
    "excerpt": "GOOGLE_PLAY_SERVICE_ACCOUNT = $env:GOOGLE_PLAY_SERVICE_ACCOUNT"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 37,
    "match": "PASSWORD",
    "excerpt": "ANDROID_KEYSTORE_PASSWORD = $env:ANDROID_KEYSTORE_PASSWORD"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 39,
    "match": "PASSWORD",
    "excerpt": "ANDROID_KEY_PASSWORD = $env:ANDROID_KEY_PASSWORD"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 40,
    "match": "API_KEY",
    "excerpt": "APPLE_API_KEY = $env:APPLE_API_KEY"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 42,
    "match": "SLACK_WEBHOOK",
    "excerpt": "SLACK_WEBHOOK = $env:SLACK_WEBHOOK"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 45,
    "match": "SECRET",
    "excerpt": "foreach ($k in $secrets.Keys) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 46,
    "match": "SECRET",
    "excerpt": "Set-Secret -name $k -value $secrets[$k]"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 49,
    "match": "SECRET",
    "excerpt": "if (Test-Path $SecretsFile) {"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 51,
    "match": "SECRET",
    "excerpt": "$json = Get-Content $SecretsFile -Raw | ConvertFrom-Json"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 52,
    "match": "SECRET",
    "excerpt": "foreach ($p in $json.PSObject.Properties) { Set-Secret -name $p.Name -value $p.Value }"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 54,
    "match": "SECRET",
    "excerpt": "Write-Host \"No secrets.json found or invalid JSON. Skipping file-based secrets.\""
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\gh-set-secrets.ps1",
    "line": 58,
    "match": "SECRET",
    "excerpt": "Write-Host \"Done. Verify secrets in repository Settings â†’ Secrets and variables â†’ Actions.\""
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\scan-secrets.ps1",
    "line": 2,
    "match": "SECRET",
    "excerpt": "Scans the repository for common secret-like keywords and writes a JSON report to secrets-scan.json"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\scan-secrets.ps1",
    "line": 3,
    "match": "SECRET",
    "excerpt": "Usage: pwsh -NoProfile -ExecutionPolicy Bypass -File scripts/scan-secrets.ps1"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\scan-secrets.ps1",
    "line": 9,
    "match": "API_KEY",
    "excerpt": "'API_KEY','APIKEY','TOKEN','ACCESS_TOKEN','SECRET','PASSWORD',"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\scan-secrets.ps1",
    "line": 10,
    "match": "SECRET",
    "excerpt": "'AWS_ACCESS_KEY','AWS_SECRET','PRIVATE_KEY','BEGIN RSA PRIVATE KEY','BEGIN PRIVATE KEY',"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\scan-secrets.ps1",
    "line": 11,
    "match": "SECRET",
    "excerpt": "'ssh-rsa','supersecretkey','adminpass','userpass','a41.chat.agora.io','FASTLANE','VERCEL',"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\scan-secrets.ps1",
    "line": 12,
    "match": "APP_STORE",
    "excerpt": "'APP_STORE','APP_STORE_CONNECT','GOOGLE_PLAY','SLACK_WEBHOOK'"
  },
  {
    "path": "C:\\Users\\User\\Documents\\EngageSphere\\scripts\\scan-secrets.ps1",
    "line": 48,
    "match": "SECRET",
    "excerpt": "$reportPath = Join-Path -Path (Get-Location) -ChildPath 'secrets-scan.json'"
  }
]
